//This code was generated by a tool as of 2007-06-18 14:02:23.875.

using System;
using System.Collections;
using Wilson.ORMapper;

namespace SimatSoft.DB.ORM
{
	public class Screen : IObjectHelper, IObjectNotification
	{
		private string scID;
		private string sCsubType;
		private string scName;
		private string scType;
		private int scOrder;
		private bool scFlag;
		private SysScreenSubType sysScreenSubTypeObject; // Strongly Type as SysScreenSubType if not Lazy-Loading
		private IList whgroupAccesses; // Supports both ObjectSet and Lazy-Loaded ObjectList
		private IList whuserAccesses; // Supports both ObjectSet and Lazy-Loaded ObjectList

		public string ScID
		{
			get { return this.scID; }
		}

		public string SCsubType
		{
			get { return this.sCsubType; }
			set { this.sCsubType = value; }
		}

		public string ScName
		{
			get { return this.scName; }
			set { this.scName = value; }
		}

		public string ScType
		{
			get { return this.scType; }
			set { this.scType = value; }
		}

		public int ScOrder
		{
			get { return this.scOrder; }
			set { this.scOrder = value; }
		}

		public bool ScFlag
		{
			get { return this.scFlag; }
			set { this.scFlag = value; }
		}

		// Return the primary key property from the primary key object
		public SysScreenSubType SysScreenSubTypeObject
		{
			get { return this.sysScreenSubTypeObject; }
		}

		public IList WhgroupAccesses
		{
			get { return this.whgroupAccesses; }
		}

		public IList WhuserAccesses
		{
			get { return this.whuserAccesses; }
		}


		#region IObjectHelper Members
		public object this[string memberName]
		{
			get {
				switch (memberName) {
					case "scID": return this.scID;
					case "sCsubType": return this.sCsubType;
					case "scName": return this.scName;
					case "scType": return this.scType;
					case "scOrder": return this.scOrder;
					case "scFlag": return this.scFlag;
					case "sysScreenSubTypeObject": return this.sysScreenSubTypeObject;
					case "whgroupAccesses": return this.whgroupAccesses;
					case "whuserAccesses": return this.whuserAccesses;
					default: throw new Exception("Invalid Member");
				}
			}
			set {
				switch (memberName) {
					case "scID": this.scID = (string) value; break;
					case "sCsubType": this.sCsubType = (string) value; break;
					case "scName": this.scName = (string) value; break;
					case "scType": this.scType = (string) value; break;
					case "scOrder": this.scOrder = (int) value; break;
					case "scFlag": this.scFlag = (bool) value; break;
					case "sysScreenSubTypeObject": this.sysScreenSubTypeObject = (SysScreenSubType) value; break;
					case "whgroupAccesses": this.whgroupAccesses = (IList) value; break;
					case "whuserAccesses": this.whuserAccesses = (IList) value; break;
					default: throw new Exception("Invalid Member");
				}
			}
		}
		#endregion

		#region IObjectNotification Members
		public void OnCreated(Transaction transaction)
		{
			// TODO
		}

		public void OnCreating(Transaction transaction)
		{
			// TODO
		}

		public void OnDeleted(Transaction transaction)
		{
			// TODO
		}

		public void OnDeleting(Transaction transaction)
		{
			// TODO
		}

		public void OnMaterialized(System.Data.IDataRecord dataRecord)
		{
			// TODO
		}

		public void OnPersistError(Transaction transaction, Exception exception)
		{
			// TODO
		}

		public void OnUpdated(Transaction transaction)
		{
			// TODO
		}

		public void OnUpdating(Transaction transaction)
		{
			// TODO
		}
		#endregion
	}
}
